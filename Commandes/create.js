const Discord = require('discord.js');
const mysql = require('mysql2/promise'); // Utilisation de mysql2 avec promesses
const config = require('../config')

module.exports = {
    name: "create",
    description: "Cr√©er une annonce pour vendre un objet",
    permission: "Aucune",
    dm: true,
    options: [
        {
            type: "string",
            name: "item",
            description: "Nom de l'objet √† vendre",
            required: true
        },
        {
            type: "integer",
            name: "price",
            description: "Prix de d√©part de l'objet",
            required: true
        }
    ],
    async run(bot, interaction) {
        // R√©cup√©rer les informations de l'utilisateur
        const userIdDiscord = interaction.user.id;
        const userPseudo = interaction.user.username;
        const itemName = interaction.options.getString("item");
        const itemPrice = interaction.options.getInteger("price");

        // V√©rifier si l'utilisateur a le bon r√¥le
        const allowedRoles = ['1267053759704469575', '1274301147053817888'];
        const member = interaction.guild.members.cache.get(userIdDiscord);

        if (!member || !allowedRoles.some(role => member.roles.cache.has(role))) {
            await interaction.reply({content: "Vous n'avez pas les autorisations n√©cessaires pour cr√©er une annonce.", ephemeral: true});
            return;
        }

        // Configuration de la connexion √† la base de donn√©es
        const connection = await mysql.createConnection({
            host: config.host,
            user: config.user,
            password: config.password,
            database: config.database
        });

        try {
            // Rechercher l'ID utilisateur bas√© sur l'ID Discord
            const userQuery = 'SELECT utilisateurId FROM utilisateur WHERE utilisateurIdDiscord = ?';
            const [userRows] = await connection.execute(userQuery, [userIdDiscord]);

            if (userRows.length === 0) {
                await interaction.reply({content: "Utilisateur non trouv√© dans la base de donn√©es.", ephemeral: true});
                return;
            }

            const utilisateurId = userRows[0].utilisateurId;

            // Ins√©rer les donn√©es dans la table objet
            const insertQuery = 'INSERT INTO objet (objetName, objetPrixDepart, utilisateurId) VALUES (?, ?, ?)';
            const [result] = await connection.execute(insertQuery, [itemName, itemPrice, utilisateurId]);
            const objectId = result.insertId;

            // R√©cup√©rer les salons et le forum
            const announcementChannelId = '1273878546829545513';
            const forumId = '1273877880073617479';
            
            // Envoyer un message dans le salon sp√©cifique
            const announcementChannel = interaction.guild.channels.cache.get(announcementChannelId);
            if (announcementChannel) {
                await announcementChannel.send(`**${itemName}** vient d'√™tre rajout√© aux ench√®res, organis√© par <@${userIdDiscord}> (Ench√®re #${objectId})`);
            }

            // Cr√©er un post dans le forum
            const forum = interaction.guild.channels.cache.get(forumId);
            if (forum) {
                const thread = await forum.threads.create({
                    name: `[EN COURS] Ench√®re #${objectId} - ${itemName}`,
                    autoArchiveDuration: Discord.ThreadAutoArchiveDuration.ThreeDays,
                    message: {
                        content: `Ench√®re #${objectId} organis√©e par <@${userIdDiscord}>`,
                    },
                    reason: 'Cr√©ation d\'un post pour une nouvelle vente',
                });

                const postEmbed = new Discord.EmbedBuilder()
                    .setTitle(`Ench√®re #${objectId}`)
                    .setDescription(`**Item:** ${itemName}\n**Prix de d√©part**: ${itemPrice}\n**Annonce faite par**: <@${userIdDiscord}>`)
                    .setColor('#0099ff');

                // Envoyer un message dans le fil de discussion du forum
                const postMessage = await thread.send({
                    embeds: [postEmbed],
                    components: [
                        new Discord.ActionRowBuilder().addComponents(
                            new Discord.ButtonBuilder()
                                .setCustomId(`buycustom_${objectId}`)
                                .setEmoji("üí∞")
                                .setLabel('Surench√©rir')
                                .setStyle(Discord.ButtonStyle.Secondary),
                            new Discord.ButtonBuilder()
                                .setCustomId(`buyEnd_${objectId}`)
                                .setLabel("Valider l'ench√®re")
                                .setEmoji('‚úÖ')
                                .setStyle(Discord.ButtonStyle.Success),
                            new Discord.ButtonBuilder()
                                .setCustomId(`buyCancel_${objectId}`)
                                .setEmoji('‚úñÔ∏è')
                                .setLabel("Annuler l'ench√®re (Uniquement si aucune proposition)")
                                .setStyle(Discord.ButtonStyle.Danger)
                        )
                    ]
                });
            }

            await interaction.reply({content: "Votre annonce a √©t√© cr√©√©e avec succ√®s !", ephemeral: true});
        } catch (error) {
            console.error(error);
            await interaction.reply({content: "Une erreur s'est produite lors de la cr√©ation de l'annonce. Veuillez r√©essayer plus tard.", ephemeral: true});
        } finally {
            // Fermer la connexion √† la base de donn√©es
            if (connection && connection.end) {
                await connection.end();
            }
        }
    }
};
